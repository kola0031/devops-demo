name: 'Complete DevOps Pipeline'

on:
  workflow_dispatch:  # Manual trigger
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-east-1
  ECS_CLUSTER: devops-demo-cluster
  ECS_SERVICE: devops-demo-service
  CONTAINER_NAME: devops-web
  TF_WORKSPACE: default

jobs:
  deploy:
    name: 'Deploy Infrastructure and Application'
    runs-on: self-hosted
    defaults:
      run:
        working-directory: ./terraform

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Install jq
      run: |
        if command -v jq &> /dev/null; then
          echo "jq is already installed"
        else
          if [[ "$OSTYPE" == "darwin"* ]]; then
            brew install jq
          else
            sudo apt-get update && sudo apt-get install -y jq
          fi
        fi

    - name: Get DB Password from Secrets Manager
      id: get-secret
      run: |
        # Get the secret
        SECRET_JSON=$(aws secretsmanager get-secret-value \
          --secret-id ${{ secrets.DB_PASSWORD_ARN }} \
          --query SecretString \
          --output text)
        
        # Debug: Print the secret format (masked)
        echo "::add-mask::$SECRET_JSON"
        echo "Secret format: $SECRET_JSON"
        
        # Extract password from JSON
        if echo "$SECRET_JSON" | jq -e . >/dev/null 2>&1; then
          DB_PASSWORD=$(echo "$SECRET_JSON" | jq -r '.password')
        else
          # If not JSON, use the secret as is
          DB_PASSWORD="$SECRET_JSON"
        fi
        
        # Debug: Print password requirements
        echo "Password length: ${#DB_PASSWORD}"
        echo "Contains uppercase: $([[ "$DB_PASSWORD" =~ [A-Z] ]] && echo "yes" || echo "no")"
        echo "Contains lowercase: $([[ "$DB_PASSWORD" =~ [a-z] ]] && echo "yes" || echo "no")"
        echo "Contains numbers: $([[ "$DB_PASSWORD" =~ [0-9] ]] && echo "yes" || echo "no")"
        echo "Contains special: $([[ "$DB_PASSWORD" =~ [^A-Za-z0-9] ]] && echo "yes" || echo "no")"
        
        # Validate password format
        if ! [[ "$DB_PASSWORD" =~ [A-Z] ]] || \
           ! [[ "$DB_PASSWORD" =~ [a-z] ]] || \
           ! [[ "$DB_PASSWORD" =~ [0-9] ]] || \
           ! [[ "$DB_PASSWORD" =~ [^A-Za-z0-9] ]] || \
           [ ${#DB_PASSWORD} -lt 8 ]; then
          echo "Error: Password must be at least 8 characters long and contain uppercase, lowercase, numbers, and special characters"
          echo "Current password format:"
          echo "- Length: ${#DB_PASSWORD}"
          echo "- Has uppercase: $([[ "$DB_PASSWORD" =~ [A-Z] ]] && echo "yes" || echo "no")"
          echo "- Has lowercase: $([[ "$DB_PASSWORD" =~ [a-z] ]] && echo "yes" || echo "no")"
          echo "- Has numbers: $([[ "$DB_PASSWORD" =~ [0-9] ]] && echo "yes" || echo "no")"
          echo "- Has special: $([[ "$DB_PASSWORD" =~ [^A-Za-z0-9] ]] && echo "yes" || echo "no")"
          exit 1
        fi
        
        echo "::add-mask::$DB_PASSWORD"
        echo "TF_VAR_db_password=$DB_PASSWORD" >> $GITHUB_ENV
        echo $TF_VAR_db_password

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: "1.5.7"
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    - name: Terraform Format
      run: terraform fmt -check 

    - name: Terraform Init
      run: |
        terraform init \
          -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
          -backend-config="key=${{ secrets.TF_STATE_KEY }}" \
          -backend-config="region=${{ env.AWS_REGION }}" \
          -get=true \
          -upgrade
      env:
        TF_LOG: DEBUG
        TF_INPUT: false
        TF_IN_AUTOMATION: true
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}

    - name: Terraform Plan
      if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
      run: terraform plan -out=tfplan
      env:
        TF_LOG: DEBUG
        TF_INPUT: false
        TF_IN_AUTOMATION: true 
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        TF_VAR_aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
        TF_VAR_aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        TF_VAR_db_username: ${{ secrets.DB_USERNAME }}
        # TF_VAR_db_password is already in $GITHUB_ENV

    - name: Terraform Apply
      if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
      run: terraform apply -auto-approve tfplan
      env:
        TF_LOG: DEBUG
        TF_INPUT: false
        TF_IN_AUTOMATION: true
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}
        TF_VAR_aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
        TF_VAR_aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        TF_VAR_db_username: ${{ secrets.DB_USERNAME }}
        # TF_VAR_db_password is already in $GITHUB_ENV

    - name: Get RDS Environment Variables
      if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
      run: |
        # Get RDS endpoint and remove any newlines
        RDS_ENDPOINT=$(terraform output -raw db_endpoint | tr -d '\n')
        DB_NAME=$(terraform output -raw db_name | tr -d '\n')
        
        # Set environment variables
        echo "RDS_ENDPOINT=${RDS_ENDPOINT}" >> $GITHUB_ENV
        echo "DB_NAME=${DB_NAME}" >> $GITHUB_ENV
        
        # Debug output (masked)
        echo "::add-mask::$RDS_ENDPOINT"
        echo "::add-mask::$DB_NAME"

    - name: Login to Amazon ECR
      if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Get ECR Repository
      if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
      working-directory: ../
      run: |
        ECR_REPO=$(aws ecr describe-repositories --repository-names devops-demo --query 'repositories[0].repositoryUri' --output text)
        echo "ECR_REPO=$ECR_REPO" >> $GITHUB_ENV

    - name: Build, tag, and push image to ECR
      if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
      working-directory: ${{ github.workspace }}
      run: |
        IMAGE_TAG=$(echo ${{ github.sha }} | cut -c1-7)
        IMAGE_URI=${{ env.ECR_REPO }}:$IMAGE_TAG
        docker build -t $IMAGE_URI .
        docker push $IMAGE_URI
        echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

    - name: Create ECS task definition
      if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
      working-directory: ${{ github.workspace }}
      run: |
        # Extract AWS account ID from ECR repository URL
        AWS_ACCOUNT_ID=$(echo ${{ env.ECR_REPO }} | cut -d'.' -f1)

        # Get the task execution role ARN
        TASK_EXECUTION_ROLE_ARN="arn:aws:iam::${AWS_ACCOUNT_ID}:role/ecsTaskExecutionRole"

        # Verify the role exists
        if ! aws iam get-role --role-name ecsTaskExecutionRole &>/dev/null; then
          echo "Error: Task execution role does not exist"
          exit 1
        fi

        echo "Using execution role ARN: ${TASK_EXECUTION_ROLE_ARN}"

        # Create task definition with health check
        cat << EOF > task-definition.json
        {
          "family": "devops-demo-task",
          "networkMode": "awsvpc",
          "requiresCompatibilities": ["FARGATE"],
          "cpu": "256",
          "memory": "512",
          "executionRoleArn": "${TASK_EXECUTION_ROLE_ARN}",
          "taskRoleArn": "${TASK_EXECUTION_ROLE_ARN}",
          "containerDefinitions": [
            {
              "name": "${{ env.CONTAINER_NAME }}",
              "image": "${{ env.IMAGE_URI }}",
              "essential": true,
              "portMappings": [
                {
                  "containerPort": 80,
                  "protocol": "tcp"
                }
              ],
              "environment": [
                {
                  "name": "DB_HOST",
                  "value": "${{ env.RDS_ENDPOINT }}"
                },
                {
                  "name": "DB_NAME",
                  "value": "${{ env.DB_NAME }}"
                },
                {
                  "name": "DB_USER",
                  "value": "${{ secrets.DB_USERNAME }}"
                },
                {
                  "name": "ENV_NAME",
                  "value": "Prod"
                }
              ],
              "secrets": [
                {
                  "name": "DB_PASS",
                  "valueFrom": "${{ secrets.DB_PASSWORD_ARN }}"
                }
              ],
              "healthCheck": {
                "command": ["CMD-SHELL", "curl -f http://localhost:80/ || exit 1"],
                "interval": 30,
                "timeout": 5,
                "retries": 3,
                "startPeriod": 60
              },
              "logConfiguration": {
                "logDriver": "awslogs",
                "options": {
                  "awslogs-group": "/ecs/devops-demo",
                  "awslogs-region": "${{ env.AWS_REGION }}",
                  "awslogs-stream-prefix": "ecs"
                }
              }
            }
          ]
        }
        EOF

        # Validate JSON format
        if ! jq . task-definition.json > /dev/null 2>&1; then
          echo "Error: Invalid JSON in task definition"
          exit 1
        fi

    - name: Register new task definition
      if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
      working-directory: ../
      run: |
        TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file://task-definition.json --query 'taskDefinition.taskDefinitionArn' --output text)
        echo "TASK_DEF_ARN=$TASK_DEF_ARN" >> $GITHUB_ENV

    - name: Update ECS service
      if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
      working-directory: ../
      run: |
        aws ecs update-service \
          --cluster ${{ env.ECS_CLUSTER }} \
          --service ${{ env.ECS_SERVICE }} \
          --task-definition ${{ env.TASK_DEF_ARN }} \
          --force-new-deployment

    - name: Wait for service stability
      if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
      working-directory: ../
      run: |
        aws ecs wait services-stable \
          --cluster ${{ env.ECS_CLUSTER }} \
          --services ${{ env.ECS_SERVICE }} 